/*==============================================================================

   頂点管理 [timer.cpp]
														 Author :
														 Date   :
--------------------------------------------------------------------------------
==============================================================================*/
#include "timer.h"
#include "sprite.h"
#include "texture.h"
#include "text.h"
#include <sstream>


//*****************************************************************************
// グローバル変数
//*****************************************************************************
struct POLYGON {
	D3DXVECTOR2		pos;	//位置ベクトル
	D3DXVECTOR2		vel;	//速度ベクトル
	D3DXCOLOR		color;	//頂点カラー
	float			rot;
};
static unsigned int g_Second = 0;
static unsigned int g_MiliSecond = 0;
static unsigned int g_StartTime = 0;

//=============================================================================
// 初期化処理
//=============================================================================
void InitTimer(void)
{
	//ゲームの開始時刻を保存する
	g_StartTime = timeGetTime();
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitTimer(void)
{
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateTimer(void)
{
	//経過した秒数を更新する
	g_Second = (timeGetTime() - g_StartTime) / 1000;

	g_MiliSecond = ((timeGetTime() - g_StartTime) / 10) % 100;
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawTimer(void)
{
	int second = g_Second;
	//時間表示
	int milisecond = g_MiliSecond;
	//ミリ秒表示
	
	std::stringstream ss;
	ss << "time: " << second << "."<<milisecond;
	ss ;
	std::string str = ss.str();
	PrintText(str, D3DXVECTOR2(1030.0f, 100.0f), 0.5);
}

std::string GetTimer() {
	return std::to_string(g_Second) + "." + std::to_string(g_MiliSecond);
}